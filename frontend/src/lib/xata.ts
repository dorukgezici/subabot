// Generated by Xata Codegen 0.29.5. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "Crawl",
    columns: [
      {
        name: "entries",
        type: "json",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "feed",
        type: "link",
        link: { table: "Feed" },
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "key",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
      },
    ],
  },
  {
    name: "Feed",
    columns: [
      {
        name: "key",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
      },
      {
        name: "refreshedAt",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "title",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
      },
    ],
  },
  {
    name: "History",
    columns: [
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
      },
    ],
  },
  {
    name: "Keyword",
    columns: [
      {
        name: "checkedAt",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue: null,
      },
      {
        name: "key",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
      },
      {
        name: "value",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
      },
    ],
  },
  {
    name: "Search",
    columns: [
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Crawl = InferredTypes["Crawl"];
export type CrawlRecord = Crawl & XataRecord;

export type Feed = InferredTypes["Feed"];
export type FeedRecord = Feed & XataRecord;

export type History = InferredTypes["History"];
export type HistoryRecord = History & XataRecord;

export type Keyword = InferredTypes["Keyword"];
export type KeywordRecord = Keyword & XataRecord;

export type Search = InferredTypes["Search"];
export type SearchRecord = Search & XataRecord;

export type DatabaseSchema = {
  Crawl: CrawlRecord;
  Feed: FeedRecord;
  History: HistoryRecord;
  Keyword: KeywordRecord;
  Search: SearchRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://DGtech-q1f4co.eu-west-1.xata.sh/db/subabot",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
